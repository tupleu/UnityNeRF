Shader "MobileNeRF/ViewDependenceNetworkShader/hotdog" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.1061759, -0.1385537, 0.0751272, 0.2847123, 0.0725373, -0.1211985, -0.0944004, -0.0096357, 0.1199291, 0.0560272, 0.1128610, -0.3800034, 0.3110003, 0.1637999, -0.2689922, 0.2418929 };
        intermediate_one += f0.r * float4x4(-0.6717926, 0.3396420, 0.2373393, -0.1765233, 0.5187390, -0.5116762, -0.1482618, 0.2637567, -0.2740585, -0.0336510, 0.8073602, -0.3931848, -0.2191492, 0.1347786, 0.2770566, 0.0708020)
            + f0.g * float4x4(-0.2303570, 0.4525080, 0.4727440, -0.1686537, -0.7250575, -0.0381391, 0.7635252, -0.4828993, 0.5272635, 0.6026403, 0.0590055, -0.4059318, 0.0540358, 0.8332451, 0.1950865, -0.4068730)
            + f0.b * float4x4(-0.5844281, -0.1252547, 0.1777519, -0.6261106, 0.0108690, 0.6093768, 0.2559084, -0.0438184, -0.1988740, -0.2669486, -0.7476225, 0.1017487, -0.0908529, -0.2505519, 0.8965158, 0.2581863)
            + f0.a * float4x4(-0.0691560, 0.6666253, -0.2659950, 0.6324756, -0.4248414, 0.0484350, 0.1264694, 0.4604625, -0.4917648, 0.4024135, -0.6160023, 0.8973147, 0.2731764, -0.2038700, 0.2560258, -0.0802803)
            + f1.r * float4x4(0.5984237, 0.1888308, -0.2664824, 0.5133329, -0.2865928, -0.0590617, 0.0567325, 0.2238685, 0.8472152, 0.7211897, 0.8251642, 0.1746455, 0.7159604, -0.5874500, 0.3610476, -0.2941348)
            + f1.g * float4x4(0.4421054, -0.4014388, -0.0115328, 0.1319031, 0.6078604, 0.6197551, 0.1199568, -0.1563016, 0.4403377, -0.1344618, 0.3373825, 0.4762599, 0.3906032, 0.7962185, 0.5012939, -0.8816807)
            + f1.b * float4x4(-0.1901138, 0.6073077, -0.2363972, -0.1015709, -0.3183507, 0.4447697, -0.5032985, -0.5239365, -1.0709670, -0.6723341, 0.5897605, -0.3176086, 0.1047058, 0.4382120, -0.2133687, 0.5389956)
            + f1.a * float4x4(0.8760310, -0.4844431, 0.2944810, -0.1701755, 0.0231481, 0.2337931, 0.5047898, 0.4698477, 0.2032714, 0.3569017, 0.2487012, 0.4049954, -0.8449708, 0.0166496, 0.0388969, 0.4432885)
            + viewdir.r * float4x4(0.1396884, 0.1434142, 0.0287930, -0.2861865, 0.2174455, 0.0987839, 0.1360323, -0.0050740, 0.3927561, -0.6323556, -0.0452564, -0.4226156, -0.5684904, -0.0277461, -0.2126887, -0.3490763)
            + viewdir.g * float4x4(-0.1121578, -0.0015944, -0.1833604, 0.2054289, -0.3447638, -0.0331993, 0.4148850, -0.1089847, 0.2502250, 0.2123640, 0.0884057, -0.0055247, -0.2713215, 0.2716734, 0.1258780, -0.1046067)
            + viewdir.b * float4x4(0.0253228, 0.1296636, -0.0578532, -0.4160227, 0.0045029, 0.1704034, -0.1644165, -0.3984385, -0.0666220, 0.1681132, -0.0388278, 0.0113040, -0.0934843, -0.2820456, -0.2871144, 0.0788334);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            0.3704263, -0.2529654, -0.0340803, -0.3014424, 0.0400193, -0.0216811, 0.2337203, 0.2306138, 0.0520560, 0.2488687, -0.1001785, 0.1129840, 0.0157946, 0.1363558, 0.0072724, 0.1025090
        );
        intermediate_two += intermediate_one[0][0] * float4x4(-0.1557644, -3.1806164, 0.7076185, -0.0490699, 0.1718030, 0.9349213, 0.2440939, -0.3026093, 0.5014003, 0.2740377, -0.1480134, 0.6282224, 0.5585643, 0.2211194, -0.1359735, -0.1506767)
            + intermediate_one[0][1] * float4x4(-0.2549250, 0.7971035, 0.2584175, -0.3491897, -0.2322147, -0.2783332, 0.0617641, -0.1065014, -0.0308353, 0.1594011, 0.5441455, 0.0055148, 0.1950189, -0.0756159, -0.8739881, 0.4950961)
            + intermediate_one[0][2] * float4x4(0.0573949, -0.1774828, -0.3089190, -0.2017795, -0.1865292, 0.0134806, 0.1989018, 0.5492008, -0.1380700, 0.5028180, 0.2251348, 0.2458316, -0.4872673, -0.2294040, -0.3242481, 0.5602680)
            + intermediate_one[0][3] * float4x4(0.4794429, -0.3629025, -0.0162804, 0.1736556, 0.1674486, 0.2123026, -0.7717680, -0.0105304, 0.1255863, -0.0270614, -0.3925797, -0.2126895, 0.1397975, 0.8005364, -0.7273139, -0.1971441)
            + intermediate_one[1][0] * float4x4(0.0011790, 0.2447717, -0.3980829, -1.1080372, 0.2104118, 0.1893176, 0.8488861, 0.4921913, -0.6996927, 0.6584879, 0.5520731, 0.6929339, -0.2694386, -0.0567586, -0.4201979, 0.2901491)
            + intermediate_one[1][1] * float4x4(0.4697200, -0.0402556, 0.1240652, 0.4671167, 0.0347971, 0.3934511, -0.0527253, 0.3999129, -0.5624474, -0.5922326, -0.3539598, -0.3045425, 0.3613506, 0.1311417, -0.2365541, -0.1433944)
            + intermediate_one[1][2] * float4x4(0.2707320, 0.0372785, -0.0311969, 0.1190880, -0.2928660, 0.0763436, -0.6461768, 0.0084369, 0.0133896, -0.2767837, -0.2746183, -1.2928169, 0.2544749, 0.1727820, 0.0344215, 0.0401880)
            + intermediate_one[1][3] * float4x4(-0.3436396, -0.0913624, 0.5798926, 0.3242952, 0.2781909, -0.3655967, 0.3240083, -0.5140051, -0.2084632, 0.4386669, -0.3958908, 0.2425809, 0.3454444, 0.2219945, -0.0796064, -0.3426479)
            + intermediate_one[2][0] * float4x4(0.2364513, 0.2117306, 0.6799337, 0.1342439, 0.2787670, 0.4996150, -1.2955760, 0.3526466, 0.4433830, 0.2265517, 0.1231810, -0.4617673, 0.5580797, 0.6210545, 0.1141463, 0.0268063)
            + intermediate_one[2][1] * float4x4(0.2200592, 0.0612853, -0.1695603, -0.0758328, -0.1981543, -0.1657497, 0.9866253, -0.1532870, -0.3021605, 0.3424029, 0.5033326, 0.1137770, -0.4924972, 0.1463924, 0.1873717, 0.0960318)
            + intermediate_one[2][2] * float4x4(-0.5521222, -0.4022719, 0.0859409, -0.0826634, 0.7200899, -0.0243401, 0.0077759, 0.1396383, -0.4746720, -0.4104264, 0.3894456, 0.4602322, 0.2216394, 0.4541785, -0.0155963, 0.6560010)
            + intermediate_one[2][3] * float4x4(0.0283189, 1.4261578, 0.2098733, -0.5267469, -0.4119104, 0.1126052, 0.4170834, 0.0919097, -0.1792324, 0.4088990, 0.6950548, 0.4394695, 0.0226177, -0.0911659, 0.0283070, 0.6440706)
            + intermediate_one[3][0] * float4x4(0.1166562, -0.6326618, 0.2211122, 0.4015495, 0.3332759, 0.0562850, -0.7079917, 0.1216407, 0.2002400, -0.3062167, -0.6396452, -0.4329016, 0.5477348, 0.5912431, 0.3917260, -0.3314861)
            + intermediate_one[3][1] * float4x4(-0.0840904, 0.0503300, -0.1741125, 0.5712236, 0.0400966, -0.2321531, -0.2900404, 0.9458653, 0.5945078, 0.0629409, -0.7566638, -0.1946559, -0.1502119, -0.2383417, 0.2568969, 0.4010966)
            + intermediate_one[3][2] * float4x4(-0.0710910, 0.1786425, 0.0942780, 0.0482183, -0.1868449, 0.4590982, 0.1885697, 0.1473939, 0.0086369, 0.3404203, 0.5095850, -0.2566846, 0.2214120, -0.1237760, 0.5601523, 0.0803861)
            + intermediate_one[3][3] * float4x4(-0.6783730, 0.1063919, 0.2046664, 0.4350566, -0.5618722, -0.2491167, -1.0573804, 0.5099782, 0.4213637, 0.6249781, -0.0954725, -2.9592936, -0.1114314, -0.1999456, -0.1666355, 0.9000585);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            -0.0292105, 0.1973448, 0.1040039
        );
        result += intermediate_two[0][0] * float3(-0.2627183, -0.0684853, 0.2246194)
                + intermediate_two[0][1] * float3(1.1592324, 1.8409723, 2.7087243)
                + intermediate_two[0][2] * float3(-0.3129205, -0.5585304, -0.3656797)
                + intermediate_two[0][3] * float3(0.3929732, 0.2390650, -0.4675825)
                + intermediate_two[1][0] * float3(0.8807727, 0.2490057, 0.2918504)
                + intermediate_two[1][1] * float3(-0.2629359, -0.5486562, -0.8153353)
                + intermediate_two[1][2] * float3(3.1627545, 3.2745218, 3.3059766)
                + intermediate_two[1][3] * float3(0.2024814, 0.3545721, -0.0328673)
                + intermediate_two[2][0] * float3(0.1489568, 0.4281318, 1.1785107)
                + intermediate_two[2][1] * float3(0.1086431, 0.5204476, 0.5495135)
                + intermediate_two[2][2] * float3(0.6111298, 1.5253578, 2.4703670)
                + intermediate_two[2][3] * float3(0.9905053, 2.3257811, 2.1550236)
                + intermediate_two[3][0] * float3(-0.5958893, -0.4043562, -0.9081123)
                + intermediate_two[3][1] * float3(-0.4648137, -0.6509344, -0.2071866)
                + intermediate_two[3][2] * float3(-0.0702981, -0.1906217, -0.6919619)
                + intermediate_two[3][3] * float3(0.6798412, 0.1743188, 0.1393357);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}