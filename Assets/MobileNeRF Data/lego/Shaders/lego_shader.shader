Shader "MobileNeRF/ViewDependenceNetworkShader/lego" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.2269235, 0.1246984, 0.0302631, 0.3863233, 0.0132163, -0.1223493, 0.2135356, 0.1976097, 0.2733417, 0.1061538, 0.0279519, 0.1426137, 0.1050585, 0.2050291, -0.2667987, 0.2947234 };
        intermediate_one += f0.r * float4x4(-0.1550745, 0.2739221, -0.1068844, 0.0571884, -0.8819644, -0.6792844, -0.5831596, -0.0043965, -0.7222483, 0.1259367, 0.5255100, 0.2871920, -0.2185319, 0.3066067, 0.7352207, 0.1442766)
            + f0.g * float4x4(-0.2644354, 0.3169283, 0.5973399, -0.2000705, -0.2454095, 0.0314142, 0.8275295, -0.4823675, 0.4216179, 0.4763191, 0.3007666, -0.0797436, -0.1887366, 0.8369322, 0.1610384, -0.5269468)
            + f0.b * float4x4(-0.6679222, -0.6115016, -0.1133334, -0.4229607, 1.2032290, 0.2755498, 0.4396966, -0.4711175, -0.6618581, 0.7036504, -0.0207513, 0.7173971, 0.3711783, -0.4000986, 0.5627223, 0.4714119)
            + f0.a * float4x4(0.0661365, 0.5332650, 0.1984766, 1.1340389, -0.4679668, 0.3965724, -0.1138497, 0.5401300, -0.4215341, 0.2677096, -0.7423503, 0.1059534, 0.2149868, 0.0464059, -0.4629924, -0.8008795)
            + f1.r * float4x4(0.4696997, 0.1774676, 0.1030131, 0.6672058, -0.4978063, 0.1978729, -0.3892093, -0.0962325, 0.7858062, 0.5244951, 0.6353136, -0.1362927, 0.6497416, -0.6068537, 0.5741635, -0.2107047)
            + f1.g * float4x4(0.6083115, -0.2445962, 0.0409705, -0.2604558, 0.5976020, 0.6483223, 0.9428214, -0.2509265, -0.0725485, 0.3015191, 0.2299495, 0.2184288, 0.5477287, 0.9487149, 0.6418715, -0.9136324)
            + f1.b * float4x4(-0.3364689, 0.4341469, 0.1329787, -0.2313524, -0.0915254, 0.4370941, -0.2414965, 0.0811906, -0.6842530, -0.5748372, 0.3370837, -0.8657606, 0.3525956, -0.0552243, -0.5154020, 0.4316779)
            + f1.a * float4x4(0.5957059, -1.2122897, 0.6606109, -0.1497310, 0.2286648, 0.3252485, 0.4359026, 0.8361949, 0.1383504, 0.3333824, 0.2000311, -0.4131970, -0.7767228, 0.1406561, 0.3649649, 0.2090481)
            + viewdir.r * float4x4(0.4662602, 0.1157831, 0.4813307, -0.0346695, 0.0553292, 0.0517084, 0.4504893, -0.3475346, 0.6060548, -0.4079157, -0.2826607, -0.7504345, -0.2877002, -0.2621392, 0.0937001, -0.5045722)
            + viewdir.g * float4x4(0.3012740, -0.4105127, -0.4250753, 0.3063812, -0.4184825, -0.4732916, -0.2380899, 0.3778691, 0.0534014, 0.5197746, 0.1913821, 0.5433645, -0.3453246, 0.1905317, -0.0673430, 0.5165481)
            + viewdir.b * float4x4(-0.0353796, -0.0195896, -0.1041956, -0.2861082, 0.0743760, 0.5466935, 0.0225967, -0.4594230, 0.0088109, -0.1051014, -0.4584370, -0.4301777, -0.2725261, -0.2496152, 0.0474995, 0.2162686);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            0.2385583, 0.4014240, -0.0463321, -0.0790103, -0.1754282, -0.3183758, 0.2662183, -0.0686993, 0.2013194, 0.1455566, -0.2077929, 0.1750066, -0.0386162, -0.0054783, -0.5883787, 0.1678691
        );
        intermediate_two += intermediate_one[0][0] * float4x4(-0.1829131, -0.0125259, 0.5824370, 0.0228710, 0.2061737, 0.8074948, 0.3877464, -0.1168440, -0.2912606, -0.1185783, 0.5235750, 0.0164406, 0.4183961, 0.1692836, 0.2654756, 0.1151531)
            + intermediate_one[0][1] * float4x4(-0.1374421, 0.5315363, 0.5218946, 0.2903847, -0.9707632, 0.2054556, -2.6863680, -0.8017818, -0.3545291, -0.0122956, 0.1158558, -0.1068677, 0.1920890, -0.2008755, -0.3464458, 0.3395156)
            + intermediate_one[0][2] * float4x4(0.3956938, -0.0204891, -0.1253946, -0.2114725, 0.3690800, 0.3884399, -0.0258089, 0.3670641, 0.1776711, 0.5699136, -0.1305932, 0.2668751, -0.6495307, -0.3031058, -0.0038867, 0.4997026)
            + intermediate_one[0][3] * float4x4(0.7803029, -0.1502437, -0.3322152, -0.0153450, 0.1478518, -0.1816697, -0.4270765, -0.4691220, 0.3944244, -0.2186102, -0.6950008, 0.4852560, -0.1101552, 0.5171263, -1.0155429, 0.0515984)
            + intermediate_one[1][0] * float4x4(-2.7114680, -0.7368291, 0.2003459, 0.2460428, 0.3714329, -0.4822012, 0.4462873, 0.2208643, -1.4550583, 0.5501896, 0.8580694, -0.0139865, -0.0274963, 0.7310353, -0.9621718, -0.3832492)
            + intermediate_one[1][1] * float4x4(-0.3779061, 0.0831360, -0.1046364, -0.3342270, -0.6423545, 0.8435705, 0.6570444, 0.2906300, -0.7687932, -0.6438612, 0.5476500, -0.2073212, 0.5365471, 0.2306583, -0.2628451, -0.2267495)
            + intermediate_one[1][2] * float4x4(-0.2877065, 0.7270915, -0.1215687, 0.3107579, -0.5339197, 0.0950254, -1.0910021, 0.2672833, -0.1190890, -0.1281048, -0.5870191, 0.1218096, 0.0112824, 0.0988712, 0.1500691, 0.1225325)
            + intermediate_one[1][3] * float4x4(-0.4236867, -0.1905461, 0.5836669, 0.1459515, -0.0912196, 0.0145256, 0.3776062, -0.2525060, -0.1536786, 0.4822434, 0.7002995, 0.3864435, 0.5673593, 0.4031752, -0.6827103, -0.6259384)
            + intermediate_one[2][0] * float4x4(-0.1319241, -0.4172922, -0.4756036, -0.2280811, -0.5902803, 0.0524826, -5.1559677, 0.1551285, -1.4540391, -1.6936805, 0.6719341, 0.2206709, 0.4012832, 0.1150914, -0.5770215, 0.1874259)
            + intermediate_one[2][1] * float4x4(0.4006192, -0.1984944, -0.1230461, 0.8546790, -0.0030599, -0.5615510, 0.2017664, 0.0847950, -0.1319418, 0.2577077, -0.0381308, 0.1746885, -0.3349577, 0.3426657, -0.0498701, -0.0411546)
            + intermediate_one[2][2] * float4x4(-0.4647471, -0.4238305, 0.0316668, 0.2629713, 0.2331330, 0.1621788, 0.3991738, -0.0164758, -0.4236826, -0.4873983, 0.7458610, -0.1447924, 0.2513203, 0.4846277, 0.5872684, 0.4213984)
            + intermediate_one[2][3] * float4x4(0.3307667, 0.8493999, -0.0284058, -0.4609789, 0.2719402, 0.2241214, -0.0098301, 0.2364971, 0.5782744, 0.6689880, -0.2647142, 0.3568707, -0.3654898, -0.3052141, 0.5793118, 1.1006086)
            + intermediate_one[3][0] * float4x4(0.4022614, 0.0066843, 0.0587410, 0.1897094, 0.3210734, -0.0998276, -0.4531428, 0.1286228, -0.7228675, -0.8529655, 0.0677317, 0.3309468, 0.4428766, 0.6206332, 0.0142637, -0.4908850)
            + intermediate_one[3][1] * float4x4(-0.3731102, 0.0656947, 0.1103246, 0.7517852, -0.6893504, -0.3412153, -0.7912240, 0.8885777, 0.1852994, -0.2621356, -0.5190220, -0.4202577, -0.0015650, -0.0581503, 0.2831428, 0.4134601)
            + intermediate_one[3][2] * float4x4(-0.1518663, -0.0810969, 0.2039061, -0.0283041, 0.4999653, 0.2376890, -0.0569194, -0.4442070, 0.4218584, 0.6233119, 0.3227326, -0.2178501, 0.4653927, -0.2596971, 1.0697110, 0.5057896)
            + intermediate_one[3][3] * float4x4(-1.1882716, -0.1305076, -0.4463962, -0.7733542, -0.2269971, 1.5874124, -0.3327573, 0.4607834, -1.6799707, -1.7206371, -0.3895878, -1.0098801, 0.3389108, -0.2621246, -0.3811604, -1.0696149);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            0.1431783, 0.2249873, 0.3101033
        );
        result += intermediate_two[0][0] * float3(0.3295051, 0.3557728, 0.7758887)
                + intermediate_two[0][1] * float3(0.5656108, 0.5823007, 0.5590011)
                + intermediate_two[0][2] * float3(-0.4352573, -0.3717439, -0.1922849)
                + intermediate_two[0][3] * float3(0.0952925, -0.0754188, -0.7887381)
                + intermediate_two[1][0] * float3(0.6765682, 0.8198059, 0.7661205)
                + intermediate_two[1][1] * float3(-1.1654832, -1.1142540, -1.1662360)
                + intermediate_two[1][2] * float3(1.8571666, 2.2624876, 2.7080817)
                + intermediate_two[1][3] * float3(0.2957878, 0.3264903, -0.1041775)
                + intermediate_two[2][0] * float3(-1.7333392, -1.0330449, -0.3330661)
                + intermediate_two[2][1] * float3(2.0779295, 1.3710400, 0.6742051)
                + intermediate_two[2][2] * float3(-1.0668188, -1.3261213, -1.4452016)
                + intermediate_two[2][3] * float3(-0.4112786, 0.1689127, 0.1705325)
                + intermediate_two[3][0] * float3(-0.4419779, -0.6155775, -1.0223826)
                + intermediate_two[3][1] * float3(-0.5480390, -0.6188329, -0.0358366)
                + intermediate_two[3][2] * float3(1.4076443, -0.1509690, -0.1346921)
                + intermediate_two[3][3] * float3(0.7963010, 0.3404198, 0.0985875);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}