Shader "MobileNeRF/ViewDependenceNetworkShader/drums" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.2352163, -0.1602135, -0.2262849, 0.4105462, -0.0928832, -0.1120034, 0.0469309, 0.0604336, -0.0105049, -0.0861244, 0.1207250, 0.0695815, 0.1402109, 0.0340346, -0.2332961, 0.2221391 };
        intermediate_one += f0.r * float4x4(-0.0914801, -0.1694665, -0.0734217, -0.5290217, 0.0608051, -1.1191157, -0.2851555, 0.0987859, 0.1213777, 0.2535867, 0.4529831, 0.2251536, -0.5851468, 0.0284575, 0.4362623, 0.3392567)
            + f0.g * float4x4(-0.1949831, 0.0861737, 0.8305697, 0.1659083, -0.5191594, -0.2823139, 1.4027566, -0.0260038, 0.2580567, 0.7156272, -0.0739656, -0.1854978, -0.2825436, 0.8569751, 1.0285906, -1.3382405)
            + f0.b * float4x4(-0.9379343, -0.0754108, -0.2005914, -0.6227267, 0.5081574, 0.2144951, -0.0118174, -0.5451337, 0.4703259, -0.0344708, -0.2579929, 0.7436135, -0.1146704, -0.3353398, 0.6800081, 0.4118521)
            + f0.a * float4x4(-0.3392317, 1.0767987, -0.0324861, 0.0180967, -0.1792069, 0.2024716, -0.3891607, 0.7812598, -0.3949269, 0.1517299, 0.0660218, -0.0110820, -0.1081553, -0.2654757, -0.9867331, -0.7417549)
            + f1.r * float4x4(0.5992611, 0.0569565, 0.1578492, 0.5476967, -0.5463263, 0.5648487, 0.1354472, 0.2972845, 0.6952905, 0.8094887, 0.7782272, -0.0244331, 0.9299160, -0.7026640, 0.3792808, -0.0739866)
            + f1.g * float4x4(0.5795277, -0.6432320, 0.2527100, -1.1204569, -0.2892772, 1.1699188, 0.1936656, -1.0293759, 0.3596888, 0.0096298, -0.0683382, 0.4629815, 0.2393942, 0.0579128, 0.0406353, -0.5732920)
            + f1.b * float4x4(-0.3769630, 0.5506013, -0.2614398, -0.0535008, -0.3226813, 0.4823723, -0.4007337, 0.2517250, -0.8512899, -0.7949995, 0.8047519, -0.8096335, 0.3930172, 0.1842048, -0.0568418, 0.4806209)
            + f1.a * float4x4(0.6232417, -1.0281882, 0.6208389, -0.0243971, 0.6015573, 0.2568645, 0.9810255, 0.6395217, 0.4359235, -0.1360246, 0.3896759, 0.1384322, -0.6383627, 0.1057901, -0.1231828, 0.1316924)
            + viewdir.r * float4x4(0.3218230, -0.4125134, 0.4196692, 0.2389676, -0.1008748, 0.4757064, 0.6146709, -0.0067101, 0.6956098, -0.4348428, 0.1947401, -0.3035974, 0.0285817, -0.4882949, 0.0960324, -0.2648145)
            + viewdir.g * float4x4(0.5164256, -0.7186145, -0.1440354, 0.1552273, -0.9007303, -0.2060585, -0.0828493, -0.1004169, 0.3528815, 0.2994556, -0.0191638, 0.3048471, -0.4703073, 0.0606509, -0.3424827, 0.8731405)
            + viewdir.b * float4x4(0.2780882, 0.0141122, 0.1887854, -0.6082302, -0.2540355, 0.5537929, 0.0131689, -0.4047285, 0.2443813, -0.0504614, -0.2314110, -0.1577793, 0.0618402, -0.6424476, -0.1200042, 0.0774546);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            -0.1378505, -0.1060028, -0.0660997, 0.0077738, -0.0370917, 0.1472677, -0.0229847, 0.3895656, 0.0627204, -0.1628689, -0.8555821, -0.3382628, -0.0817859, 0.2024041, 0.1225373, -0.0621770
        );
        intermediate_two += intermediate_one[0][0] * float4x4(-1.2773139, 0.0294215, 0.4963337, -0.0654978, 0.5674012, 0.4351927, -0.1369994, 0.4980146, -0.7478737, -0.1173158, 0.9301192, 0.1703703, 0.7646432, 0.1173947, 0.4862446, -0.2352230)
            + intermediate_one[0][1] * float4x4(0.6608811, 0.3324317, 0.2267854, -0.2086857, -1.2751603, -0.6175394, -1.0860866, -0.7846501, 0.8016405, 0.4755749, -1.0928580, 0.5567032, 0.0711724, -0.4696602, -0.0423058, 0.3313315)
            + intermediate_one[0][2] * float4x4(0.6617916, 0.3147267, 0.0152507, 0.2378277, -1.4680456, 0.5105209, 0.4196738, -0.5688242, -0.2279420, 0.4960464, 0.0901692, 0.8060363, -0.9664942, -0.1061260, -0.1433608, 0.4683402)
            + intermediate_one[0][3] * float4x4(1.1190820, 0.3820799, -0.6470092, -0.0981828, -0.3068832, 0.9854222, 0.2032172, -0.3586299, -0.0666711, 0.3178477, -0.3821948, 0.4455559, -0.6261104, -0.0401313, -0.9866412, 0.3624579)
            + intermediate_one[1][0] * float4x4(0.0638877, -0.3127820, -0.4010514, -0.1686068, 0.0119001, -0.3622853, 0.6223974, -0.0972783, -0.3257106, 0.4572022, -0.4619203, -2.2392638, -0.3286655, -0.3176970, -0.2731686, -0.2366039)
            + intermediate_one[1][1] * float4x4(1.1363015, 0.7205040, -0.5817984, -0.2347645, -0.3473354, 0.6645223, -0.4385081, 0.0922170, -0.2557756, 0.2075215, -0.4133997, 1.0969582, 0.2894409, 0.3551735, -0.2243253, 0.0158485)
            + intermediate_one[1][2] * float4x4(-0.0533417, 0.7290953, -0.1845514, 0.0088426, -1.1298239, -0.0235361, -0.5131201, -0.4168251, -0.2333797, -0.3163474, 0.1317419, -0.3645419, 0.0076298, 0.1415704, 0.0851933, 0.1415380)
            + intermediate_one[1][3] * float4x4(0.2330851, 0.4240369, 0.7127219, 0.3228341, 0.2431200, -0.7392884, 0.5483900, 0.1885358, -0.1811492, 0.5316210, -0.4621290, 0.0977502, 0.1844681, -0.2851578, -0.3356261, 0.3993817)
            + intermediate_one[2][0] * float4x4(0.0621199, 0.3205955, 0.1775838, 0.2268984, -0.3836726, 0.0269082, -1.1471858, -0.0228272, -0.0280020, 0.4975071, -0.5215268, -0.0097402, 0.0928515, 0.2332345, -0.3161439, 0.5911179)
            + intermediate_one[2][1] * float4x4(0.5249576, 0.1089046, -0.5541353, 0.7822796, -0.1079252, -0.3083937, 0.5836383, -1.0987695, -0.1895665, 0.6830881, 0.3365113, 0.3972406, -0.3757423, -0.0229188, 0.6859604, 0.1946066)
            + intermediate_one[2][2] * float4x4(-0.4690800, -0.3893477, 0.0865315, -0.0242280, 0.5215065, -0.2799247, 0.4764974, 0.2849311, -0.2853182, -0.3840078, 0.5458643, -0.3344070, 0.4356944, 0.4000790, 0.1723397, 0.4185997)
            + intermediate_one[2][3] * float4x4(0.2184767, 0.8201938, 0.2247833, -0.4840375, 0.3612261, -0.2100115, -0.1272440, 0.0404363, 0.6126325, 0.3705252, -0.0160749, 0.4026889, -0.1812535, -0.0918418, 0.4591198, 0.5108186)
            + intermediate_one[3][0] * float4x4(-0.8530033, -0.2400301, 0.5813645, 0.7375017, 0.4447827, -0.0014341, -0.5533594, 0.3071451, 0.5039455, -0.9051541, 0.5399612, -0.0967984, 0.3223143, 0.6796267, 0.4088151, -0.0652680)
            + intermediate_one[3][1] * float4x4(-0.5537463, -0.1416180, 0.1330744, 0.1006455, 0.0521178, 0.3327920, -0.8719785, 0.5918136, 0.4385228, -0.1916341, 0.0372777, -0.5533060, -0.0863762, 0.2493136, 0.8812238, -0.2557847)
            + intermediate_one[3][2] * float4x4(-0.3878101, -0.1161524, 0.1512944, 0.0572203, -0.3059546, 0.5588586, -0.2612116, -0.2767623, 0.4864525, 0.0315826, 0.6302925, -0.7499402, -0.0418165, -0.5637838, 0.2960743, 0.6097063)
            + intermediate_one[3][3] * float4x4(0.2506751, -0.1846317, 0.3853841, -0.0099520, -0.9040124, -0.3807564, -1.3372582, -0.1313057, 0.8501730, 0.4412188, -0.5226358, 0.2374559, -0.3827161, -0.4756666, 0.4767213, -0.1674423);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            -0.2281938, -0.0163426, 0.1751123
        );
        result += intermediate_two[0][0] * float3(3.1572495, 3.0583229, 2.9966476)
                + intermediate_two[0][1] * float3(0.4490693, 0.5692205, 0.5630745)
                + intermediate_two[0][2] * float3(-0.8583668, -0.9670989, -0.7055337)
                + intermediate_two[0][3] * float3(0.1400390, -0.0350489, -0.4830743)
                + intermediate_two[1][0] * float3(1.3043616, 1.7238945, 2.0365686)
                + intermediate_two[1][1] * float3(-0.8186893, -1.0393832, -1.2034117)
                + intermediate_two[1][2] * float3(2.4286282, 2.8742800, 3.2391198)
                + intermediate_two[1][3] * float3(-0.1614484, -0.4841531, -1.0074484)
                + intermediate_two[2][0] * float3(0.7275279, 0.9828395, 0.9589500)
                + intermediate_two[2][1] * float3(0.5765370, 0.6079642, 0.4988224)
                + intermediate_two[2][2] * float3(0.9557409, 0.2342896, 0.4717610)
                + intermediate_two[2][3] * float3(1.6649207, 2.1460938, 2.6990769)
                + intermediate_two[3][0] * float3(-0.4766509, -0.7439883, -1.0965542)
                + intermediate_two[3][1] * float3(-0.8066000, -0.4223453, 0.0698130)
                + intermediate_two[3][2] * float3(-0.4242891, -0.6612580, -0.7099293)
                + intermediate_two[3][3] * float3(0.5812145, 0.2698859, 0.0552756);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}