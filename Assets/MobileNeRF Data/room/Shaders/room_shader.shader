Shader "MobileNeRF/ViewDependenceNetworkShader/room" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.x = -o.rayDirection.x;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.1016192, -0.0067207, -0.1275246, 0.2143766, -0.0705328, 0.0005137, 0.0352317, 0.0709841, 0.1487882, -0.0757977, 0.0095636, 0.0523210, 0.1997209, 0.2811997, -0.1090873, -0.0215273 };
        intermediate_one += f0.r * float4x4(0.1732313, 0.4636261, 0.0387806, -0.3012413, 0.2197974, -0.9500348, -0.2569338, -0.1582911, -0.4017694, -0.2008747, 0.1120763, -0.2269009, -0.3011114, 0.0666187, 0.6995338, -0.3407066)
            + f0.g * float4x4(-0.5465046, 0.3171430, 0.4367831, -0.1202184, -0.6341535, 0.1170831, 0.7788508, -0.3151305, 0.2593711, 0.5947204, 0.0618748, -0.0184551, -0.2430394, 0.8822855, 0.3581960, -0.3548007)
            + f0.b * float4x4(-0.8270778, -0.4167317, 0.1556986, -0.5374593, -0.1022050, 0.2241296, 0.0530399, 0.0011170, 0.0605251, 0.1198752, -0.3906522, 0.6882076, 0.1092950, -0.1817761, 1.0424962, 0.4858700)
            + f0.a * float4x4(0.1994102, 0.3443220, 0.0769758, 0.2074728, -0.2011459, 0.5149716, 0.1279812, 0.9522840, 0.0185434, 0.1100327, -0.6666960, 0.4301343, 0.3510236, -0.1042570, -0.1999764, -0.6841455)
            + f1.r * float4x4(0.4764825, 0.3156612, 0.3575636, 0.4597846, 0.0818497, 1.0025394, -0.5835921, -0.0698321, 1.0423596, 0.7344350, 0.5650066, 0.3898600, 0.8007765, -0.5223292, 0.3472477, -0.0105341)
            + f1.g * float4x4(0.5950102, -0.5776051, -0.0265288, -0.5618874, 0.4513644, 0.9353104, 0.4517733, -0.5552211, 0.5063655, 0.0126635, 0.3033344, 0.3182049, 0.2743265, 0.5306171, 0.3689409, -0.3574648)
            + f1.b * float4x4(-0.0206101, 0.9307777, -0.1726551, -0.1082534, -0.3105803, 0.5669390, 0.0019106, -0.0098437, -0.6880957, -0.6593004, 0.3060865, -0.7563806, 0.3154083, 0.4441182, -0.2770777, 0.7410010)
            + f1.a * float4x4(0.5101760, 0.2630026, 0.5902719, -0.0049815, 0.2251492, 0.3665842, 1.2336217, 0.7669157, -0.2341242, -0.1567048, 0.2525541, 0.3700551, -0.9073272, 0.2054283, 0.0852403, 0.1021816)
            + viewdir.r * float4x4(0.9740603, -0.5390052, 0.4490823, 0.2602951, 0.9027101, -0.2094745, 0.7271453, 0.0893717, 0.5815017, -0.4365125, 0.0723872, 0.0375378, -0.2164959, -0.0715489, 0.5612255, -1.1351595)
            + viewdir.g * float4x4(-0.0178546, -1.9552541, -0.0983876, 0.1669140, -0.4246199, -1.3257222, -0.5162182, 0.1540851, 0.2272439, 0.7775357, -0.9130574, 0.6112421, -0.8514674, 1.4397284, -0.5363016, 0.2333335)
            + viewdir.b * float4x4(0.1173488, 0.5610787, 0.1212228, -0.6154430, 0.0326873, 0.4503916, -0.2293929, -0.5902277, -0.4292147, -0.0803150, -0.1263714, 0.2083008, -0.1018291, -0.1151266, 0.1407841, -0.0533163);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            0.0885089, 0.0621983, 0.0967992, -0.1219728, -0.0061072, 0.0230126, -0.0103408, 0.0900071, 0.0736643, 0.1932069, -0.2814445, -0.0368536, -0.0437229, 0.1795696, 0.0282623, 0.1798845
        );
        intermediate_two += intermediate_one[0][0] * float4x4(-0.6919698, 0.0969354, 0.5381640, 0.1293075, -0.0385879, 0.8588495, 0.2821608, 0.1598893, -0.5202668, 0.3186522, 1.3988903, 0.2794478, 0.6903148, 0.3193056, 0.0955156, -0.3498135)
            + intermediate_one[0][1] * float4x4(-0.4071954, 0.5737422, -0.5178832, -0.7961940, 0.3631593, 0.3424757, -0.2311853, -0.9470105, 0.5139979, 0.5505393, -0.5029383, -1.0342706, 0.6294215, -0.3793097, -0.2454761, 0.6444394)
            + intermediate_one[0][2] * float4x4(0.3254788, 0.1163085, -0.3910279, -0.3616793, 0.2234095, -0.2472830, -0.3088173, -0.0369582, -0.2095996, 0.5213423, 0.4662685, 0.4479569, -0.4942173, -0.3741633, -0.2128373, 0.5162741)
            + intermediate_one[0][3] * float4x4(0.5208976, -0.0795118, -0.1156532, -0.1373620, -0.0527031, -0.2279630, -0.2381157, 0.2609333, -0.5895323, 0.1668134, -0.1822146, 0.2262956, -0.6538650, 0.7505549, -0.4278123, 0.2353885)
            + intermediate_one[1][0] * float4x4(-1.0132089, 0.0079416, -0.6925410, -0.0861261, -0.0682396, -0.8129963, 0.3000033, -0.1846758, 0.7797251, 0.1778628, -2.3689973, 0.0670534, -0.5752396, -0.1752693, -0.4782099, 0.2761080)
            + intermediate_one[1][1] * float4x4(0.9539818, 0.7569647, -0.4336890, -0.2227412, -0.8418902, 0.6602190, 0.0075015, 0.1647701, -0.0891095, 0.1558047, -0.2445505, 0.6558118, 0.7782679, 0.0584894, -0.2113012, 0.1028526)
            + intermediate_one[1][2] * float4x4(0.2010573, 0.7523655, -0.3629613, 0.1913908, -0.1825656, -0.1420732, -0.2359973, -0.1629051, -0.1439468, -0.0113451, 0.0786454, -0.2398836, 0.2418739, 0.0637818, 0.2066274, 0.1165878)
            + intermediate_one[1][3] * float4x4(0.0649068, 0.5250394, 0.5402633, -0.1200777, 0.4195963, -0.3941383, 0.2807336, -0.1279689, -1.0162858, 0.6212354, -0.4036921, -0.0568234, 0.0372824, -0.0160553, -0.1534691, 0.1621684)
            + intermediate_one[2][0] * float4x4(0.1909369, -0.0368030, 0.4949546, 0.2288438, -0.2151874, -0.0561479, -0.3678584, 0.6307579, -0.0067556, 0.1828026, 0.0398969, 0.3309252, 0.0515423, 0.7412272, -0.0800869, 0.1425207)
            + intermediate_one[2][1] * float4x4(0.5558857, 0.0029114, 0.3175921, -0.1252612, -0.5462670, -0.2241017, 0.1564611, -0.4339690, 0.0591043, 0.3389170, -0.1412864, 0.7898045, -0.9207778, 0.2501058, -0.3546117, 0.1764889)
            + intermediate_one[2][2] * float4x4(-0.3162484, -0.5619678, -0.0134531, 0.6067918, 0.5277795, -0.1598293, 0.2194774, 0.2647642, -0.3748893, -0.3773353, 0.3275295, -0.4816488, 0.1909554, 0.3893679, 0.4753629, 0.2038587)
            + intermediate_one[2][3] * float4x4(0.3085653, 0.7009090, 0.5025350, -0.2416841, -0.3293732, -0.2098100, -0.1262775, 0.0119412, 0.1616680, 0.6156937, -0.1481843, 0.3463139, 0.2144902, -0.4696822, 0.2982696, 1.0445585)
            + intermediate_one[3][0] * float4x4(0.5444342, -0.2206202, 0.3816387, 0.4840136, 0.5672088, -0.0396732, -0.3634041, 0.4314983, 0.1915418, -0.3214542, -0.0778037, 0.3027688, 0.4593825, 0.5517301, 0.5081772, -0.3627996)
            + intermediate_one[3][1] * float4x4(-0.1720545, 0.0161550, 0.1778672, 0.6679685, -0.1398678, -0.0179969, -0.2331729, 0.5000079, 0.4690311, 0.0591448, -0.9997787, -0.4244263, -0.0487688, -0.0851857, 0.6114268, 0.3400385)
            + intermediate_one[3][2] * float4x4(-0.0128499, -0.0019977, 0.2548777, -0.2062294, 0.0165337, 0.5102423, -0.0815602, -0.0299122, 0.0680510, 0.3034374, 0.6410303, -0.0773513, 0.2013263, -0.2021595, 0.4490036, 0.4819255)
            + intermediate_one[3][3] * float4x4(-0.3162946, -0.4975305, 0.8012882, 0.2369170, -0.5892463, 0.9932354, -0.0411783, -0.5126957, -0.2590361, 0.7995332, -0.0109061, -2.2736712, 0.2216012, -0.4586790, -0.5953168, -0.1174192);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            0.1552580, 0.0963865, 0.2426444
        );
        result += intermediate_two[0][0] * float3(0.0862378, 0.2711042, 0.5186344)
                + intermediate_two[0][1] * float3(0.4707692, 0.5539829, 0.4161439)
                + intermediate_two[0][2] * float3(-0.9325984, -0.8273345, -0.5390766)
                + intermediate_two[0][3] * float3(-0.0828819, -0.2397699, -0.7729823)
                + intermediate_two[1][0] * float3(1.1988882, 1.2771075, 1.2121146)
                + intermediate_two[1][1] * float3(-0.9333937, -0.9510642, -0.9417178)
                + intermediate_two[1][2] * float3(0.2048457, 0.3025794, 0.4370220)
                + intermediate_two[1][3] * float3(-0.2782182, -0.1734719, -0.1504613)
                + intermediate_two[2][0] * float3(1.7633193, 1.7384045, 1.7156712)
                + intermediate_two[2][1] * float3(0.2448618, 0.4763369, 0.4259219)
                + intermediate_two[2][2] * float3(-6.0733209, -6.4865398, -7.5486603)
                + intermediate_two[2][3] * float3(1.2415725, 1.5410802, 1.6007084)
                + intermediate_two[3][0] * float3(-0.9047887, -0.8869491, -1.0187981)
                + intermediate_two[3][1] * float3(-0.8193660, -0.5445017, -0.0822206)
                + intermediate_two[3][2] * float3(0.1824084, -0.1338744, -0.5021518)
                + intermediate_two[3][3] * float3(0.6620150, 0.2424978, 0.1254713);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}