Shader "MobileNeRF/ViewDependenceNetworkShader/gardenvase" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.2135161, -0.2953411, -0.0835989, 0.1848784, -0.1620431, 0.0993345, -0.0484438, 0.0812181, 0.6863000, -0.0887935, 0.0283477, 0.1376160, 0.0466352, 0.0503299, -0.1477253, 0.0118059 };
        intermediate_one += f0.r * float4x4(-0.5651648, 0.1934589, -0.0980111, -0.4859783, -0.0429336, -1.0788856, -0.5560369, 0.0590197, -0.1887225, -0.0524281, 0.3120748, -0.1238753, -0.2213004, 0.1368269, 0.4257754, -0.0819068)
            + f0.g * float4x4(-0.0505662, 0.5969236, 0.4750818, -0.2511651, -0.5398764, 0.3132212, 0.7425036, -0.3428788, 0.5615228, 0.5778462, 0.1425840, -0.0626183, -0.4200947, 0.7234209, 0.5338870, -0.2064361)
            + f0.b * float4x4(-0.1998998, 0.1421302, 0.0953388, -0.4070379, 0.4694265, 0.0461747, 0.1425025, 0.2384819, -0.3645820, 0.1162826, -0.5554275, 0.7370467, -0.1175539, -0.1830104, 0.8323334, 0.1588809)
            + f0.a * float4x4(-0.5048011, 0.0937945, 0.3942265, 0.3126429, 0.1275378, 0.3146626, -0.4610257, 0.0903336, -1.6257826, 0.2204135, -0.4796529, 0.3701219, -0.0879943, -0.1193014, -0.5041935, -0.3227381)
            + f1.r * float4x4(0.4623377, 0.4518800, 0.4591335, 0.4859028, -0.0036363, 0.0954205, 0.1046899, 0.0435852, 0.4164523, 0.8559703, 0.4582538, 0.1673933, 0.7183105, -0.6580054, 0.5209187, -0.1717213)
            + f1.g * float4x4(0.7403273, -0.5610314, -0.0831494, -0.2484360, 0.3774245, 0.5990313, 0.4837401, -0.3738284, 0.0270105, -0.0091502, 0.1392210, 0.4668390, 0.3036082, 0.7036331, 0.4383817, -0.4949890)
            + f1.b * float4x4(0.1925435, 0.3899047, -0.0645855, 0.1638296, -0.0566692, 0.5142675, -0.3688084, -0.1645659, -1.5305407, -0.4285207, 0.3957476, -0.4475888, 0.3307103, 0.2573373, -0.4946133, 0.7815720)
            + f1.a * float4x4(0.7347937, -0.7725791, 0.1238101, 0.2222444, 0.1430985, 0.4320106, 0.5924976, 0.5284737, -0.1335878, -0.0849098, 0.6689575, 0.4738228, -0.7164316, -0.1112595, 0.0017158, 0.0150568)
            + viewdir.r * float4x4(0.8530813, 0.0359354, 0.0155952, -0.0261182, -0.3222809, 0.0165287, 0.2579618, -0.2569949, 1.5673602, -0.2714225, 0.0811029, -0.4219764, 0.0566066, -0.3242388, -0.1636018, -0.7566873)
            + viewdir.g * float4x4(-0.3915579, -0.7113308, -0.3563173, 0.0354645, -0.5170667, -0.0110544, -0.0322515, 0.1530302, 0.0422121, -0.0264667, 0.3606339, 0.2074712, -0.6681710, 0.2839914, -0.1187878, 0.2897360)
            + viewdir.b * float4x4(-0.0192253, -0.2606313, 0.0608529, -0.4724926, -0.0218550, 0.4965609, -0.5165050, -0.6510338, 0.3292288, 0.2238237, -0.4767216, 0.2226437, -0.1124775, -0.4487099, -0.1109011, -0.0096425);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            0.0084802, -0.1296202, 0.1942869, 0.0164647, 0.1926397, -0.0295624, -0.1146625, 0.1082923, 0.1511832, 0.0263304, -0.0156775, 0.0982237, -0.0791039, 0.1312845, 0.1543348, -0.2194370
        );
        intermediate_two += intermediate_one[0][0] * float4x4(-0.1512306, 0.2870203, 0.2954037, -0.0555474, 0.2406315, 0.2421609, 0.2213819, 0.0508802, 0.1916916, 0.5123273, 0.4121312, 0.5470713, 0.5014510, -0.1333801, -0.3074115, -0.0913020)
            + intermediate_one[0][1] * float4x4(0.0629366, 0.1819497, 0.2716197, -1.0321697, -1.4024565, -0.5140092, 0.1242300, -0.7001228, -0.0134022, 0.1730805, -0.1748565, 0.2998332, 0.0602827, -0.3675720, -0.8404955, 0.1109746)
            + intermediate_one[0][2] * float4x4(0.5605078, -0.1928686, -0.2653235, -0.0532475, 0.0802588, 0.0893569, 0.1738064, 0.0636217, 0.0419602, 0.4047443, 0.4764200, 0.4342085, -0.3505165, -0.1806700, -0.3108092, 0.5055081)
            + intermediate_one[0][3] * float4x4(0.5874179, 0.2340615, -0.1765897, -0.1263734, 0.0198292, -0.1308173, -0.4736885, -0.1982342, 0.0159030, 0.3457631, -0.0364265, 0.5847371, -0.4352585, 0.4233161, -0.7792948, 0.3121592)
            + intermediate_one[1][0] * float4x4(-0.1670782, -0.5161181, -0.0952845, -0.1388599, -0.6738846, -0.3871645, 0.3176190, -0.1324710, -0.3439921, -0.0756376, -0.0691973, -0.2426555, 0.0981974, 0.2829602, 0.2958243, -0.0827784)
            + intermediate_one[1][1] * float4x4(0.6320367, 0.5842150, -0.2465572, 0.2247270, -0.8390688, 0.4457642, -0.4259916, 0.6116635, 0.0371753, 0.0584628, 0.2165042, 0.6350067, 0.6019286, 0.2745157, -0.0911024, -0.1300324)
            + intermediate_one[1][2] * float4x4(0.1013591, 0.5489545, -0.1837272, 0.4883342, -0.6783536, 0.1345537, 0.4802490, 0.1414199, -0.5990441, -0.1374714, -0.1433505, -0.0663891, 0.2171922, 0.0593628, 0.2256535, -0.0746192)
            + intermediate_one[1][3] * float4x4(0.2142538, 0.5709152, 0.4432142, 0.1880722, 0.4700013, -0.2577308, 0.3726872, -0.5293897, 0.0642111, 0.5479843, 0.3112203, 0.0415504, 0.0564408, -0.2328813, -0.1566672, 0.1377025)
            + intermediate_one[2][0] * float4x4(0.0779499, 0.0850761, 0.0692329, 0.0480645, 0.2652178, -0.0574001, -0.3333619, 0.1639320, 0.1081970, 0.2122629, -0.0279129, 0.2132721, -0.4473249, 0.7875478, -0.4105088, 0.5250894)
            + intermediate_one[2][1] * float4x4(0.4412268, 0.1821358, -0.1912913, -0.0925615, -0.0552413, -0.2343859, -0.2357298, -0.4175399, 0.2403554, 0.4994806, 0.4380459, 0.1060090, -0.5477075, 0.3819957, -0.1310151, 0.0669836)
            + intermediate_one[2][2] * float4x4(-0.5808122, -0.3920267, 0.0939397, 0.3709514, 0.4840250, 0.0646603, -0.1857523, 0.1045260, -0.5856704, -0.3383056, 0.4850016, -0.2768755, 0.3033541, 0.5348777, 0.2496759, 0.3411268)
            + intermediate_one[2][3] * float4x4(0.2869265, 0.5243375, -0.0211421, -0.2978946, 0.4760067, -0.3843422, -0.5970143, 0.0697936, -0.0327460, 0.4856614, 0.0817264, -0.1003284, 0.0746059, -0.5738050, 0.2601920, 0.7147653)
            + intermediate_one[3][0] * float4x4(-0.6602561, -0.4395094, 0.4591837, 0.6520089, 1.1986976, 0.8670182, -0.0220032, 1.5914104, -0.5932258, -0.8645133, -0.2796914, 0.1082139, 0.5515262, 0.4430102, 0.9350104, -0.1613697)
            + intermediate_one[3][1] * float4x4(0.3405039, 0.0340414, 0.1981711, 0.5295300, -0.0641533, 0.0898449, -0.3093484, 0.8237617, 0.7917305, 0.0423950, -0.4140419, -0.0513775, 0.0016573, -0.0073375, 0.6614233, -0.0223614)
            + intermediate_one[3][2] * float4x4(-0.1832965, -0.2568827, 0.2960140, 0.1817937, -0.1895752, 0.3534265, -0.0223885, -0.0885008, 0.0441284, 0.1232803, 0.4748888, -0.1383665, 0.1152774, -0.5340097, 0.4760291, 0.1646723)
            + intermediate_one[3][3] * float4x4(-0.2771790, -0.3022706, 0.4028169, 0.2718693, -0.1871792, 1.1834756, 0.0927350, 0.7713270, -0.7940899, 0.1509985, 0.0787252, 0.4407657, 0.1363834, -0.6415069, 0.3602721, -0.2077460);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            -0.3003545, -0.0100401, -0.0409711
        );
        result += intermediate_two[0][0] * float3(0.5452437, 0.5683237, 0.5600331)
                + intermediate_two[0][1] * float3(0.3738015, 0.4523915, 0.4090179)
                + intermediate_two[0][2] * float3(-0.3101454, -0.4351872, 0.0347408)
                + intermediate_two[0][3] * float3(-0.3250372, -0.3164965, -0.5181649)
                + intermediate_two[1][0] * float3(1.0263205, 1.0370179, 1.2108036)
                + intermediate_two[1][1] * float3(-0.3800162, -0.6008971, -0.6791434)
                + intermediate_two[1][2] * float3(1.1509230, 1.0015978, 0.8961618)
                + intermediate_two[1][3] * float3(-0.5345148, -0.2898574, -0.3808948)
                + intermediate_two[2][0] * float3(0.8121290, 0.9557940, 1.6022308)
                + intermediate_two[2][1] * float3(0.1341709, 0.4915654, 0.2133885)
                + intermediate_two[2][2] * float3(0.5130364, -0.1205738, -0.0569380)
                + intermediate_two[2][3] * float3(0.4771852, 0.6386926, 0.6728635)
                + intermediate_two[3][0] * float3(-0.4973017, -0.4210721, -0.8860884)
                + intermediate_two[3][1] * float3(-1.3453499, -1.3018962, -1.2995682)
                + intermediate_two[3][2] * float3(-0.4616847, -0.4744350, -0.5356402)
                + intermediate_two[3][3] * float3(0.4127630, 0.0972667, -0.1769124);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}