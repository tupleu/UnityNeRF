Shader "MobileNeRF/ViewDependenceNetworkShader/ficus" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.1017794, 0.1362597, -0.2547660, 0.3918543, -0.2155826, -0.0976110, 0.0715651, 0.4195635, 0.1465995, 0.0961172, 0.2829179, 0.0529617, 0.1395595, 0.0737978, -0.0921831, -0.0682549 };
        intermediate_one += f0.r * float4x4(0.2609343, 0.6066956, 0.0663803, -0.1205417, 0.2075986, -0.8431968, -0.3562357, 0.2035370, -0.0387779, -0.2450720, 0.3710332, 0.4188225, -0.2967779, -0.0603176, 0.4286852, -0.2904288)
            + f0.g * float4x4(-0.8481250, 0.3353578, 0.6792681, -0.4699404, -0.4634334, -0.0866230, 1.0021961, 0.2760627, 0.6085597, 0.5636146, 0.3507594, -0.5054402, -0.1906022, 0.7203053, 0.2072498, -0.3828084)
            + f0.b * float4x4(-0.6581129, -0.3010115, -0.5346870, 0.0536418, -0.0026372, 0.0040659, -0.1380860, -0.3342350, -0.1938855, 0.2261106, -0.5663584, 1.0780255, -0.0212772, -0.3781406, 1.0709910, 0.7283922)
            + f0.a * float4x4(-0.5125057, 0.9961626, -0.2642989, 0.8750423, 0.3080742, 0.6453003, -0.4811467, 0.0874689, -0.5970135, 0.0901518, -0.5412390, 0.3336805, 0.2767240, -0.1763660, -0.0415842, -0.5288606)
            + f1.r * float4x4(0.2607189, -0.1390245, 0.3999620, 0.5571476, -0.6986253, 0.5099894, 0.0537008, -0.0794330, 0.6360399, 0.5234730, 0.8942264, 0.0170855, 0.3935466, -0.8783568, 0.6751895, -0.1658692)
            + f1.g * float4x4(0.7256102, -0.3223561, -0.0206384, -0.3625029, 0.6383449, 0.4112518, 0.2404059, -0.1923615, 0.1008436, 0.1813826, 0.3202438, 0.3513863, 0.2965978, 0.4364459, 0.3600388, -0.5427030)
            + f1.b * float4x4(0.0700106, 0.1857030, 0.3586847, 0.3682791, -0.4000820, 0.1624454, -0.3647048, -0.3697258, -1.2513978, -0.4837531, 0.5862741, -0.6094203, 0.0123406, 0.4398029, -0.1977158, 0.5132694)
            + f1.a * float4x4(0.5860921, -0.6397020, 0.7405721, -0.5757415, 0.1353802, 0.2289497, 0.7332128, 0.7255129, -0.4180995, 0.2420315, 0.3479153, 0.1929683, -1.3734614, 0.0963964, -0.4838648, -0.0705416)
            + viewdir.r * float4x4(0.4277505, -0.1593742, 0.2588333, -0.3173518, 0.2866894, -0.1673444, 0.0685064, 0.1719139, 0.7040845, -0.8532860, -0.0944042, -0.4845922, 0.3789298, -0.5815690, 0.3739853, -0.2348713)
            + viewdir.g * float4x4(0.6801593, -0.8193665, 0.4505104, 0.2199858, -0.6525161, -0.4626437, 0.2074497, -0.0648333, 0.3228955, 0.1934744, -0.2498406, 0.6290858, -0.2017939, 0.0826689, -0.2817062, 0.6526211)
            + viewdir.b * float4x4(0.0980026, 0.2940320, 0.3730522, -0.6661119, 0.0937619, 0.1220286, -0.5701355, -0.2801082, -0.0655457, -0.0321030, -0.2577197, 0.2389284, 0.3438493, -0.5092050, -0.4296342, 0.3152610);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            -0.1458956, -0.3416960, -0.1926901, -0.3278443, 0.0494910, -0.1005593, 0.3268361, -0.8156274, -0.0013600, 0.4232690, 0.1522378, 0.2205077, -0.0106468, -0.0744855, -0.0689037, 0.0769886
        );
        intermediate_two += intermediate_one[0][0] * float4x4(-0.5130433, 0.2530690, 0.9044225, -0.1394325, -0.2938165, 0.3796875, 0.1933074, 0.0938983, 0.0910968, 0.8044271, -0.2320864, -0.2350741, 0.3084669, -0.3888457, 0.2143773, -0.3300771)
            + intermediate_one[0][1] * float4x4(-0.3171824, 0.1693487, 0.9233475, 0.0561892, -0.3770367, -0.4238213, -0.4322917, -0.4981483, 0.1491906, -0.7711746, 0.3330910, -0.5972990, 0.7263357, -0.3810177, -0.0844923, -0.0985863)
            + intermediate_one[0][2] * float4x4(0.7208297, -0.6374848, -0.2379314, 0.1060708, 0.1303061, 0.1874031, -0.0896497, 0.3184415, -0.2638606, 0.1836095, 0.1667511, 0.0535950, -0.6947113, 0.0370567, -0.0164564, -0.2005695)
            + intermediate_one[0][3] * float4x4(0.2669636, 0.4924332, -0.4835585, -0.7304694, -0.0333068, 0.5701700, -0.0800485, -0.1356867, 0.1166716, 0.3196886, 0.5505424, -0.0967625, -0.2571298, 0.8799953, -0.6627333, 0.7909617)
            + intermediate_one[1][0] * float4x4(0.2996470, 0.9507641, -0.6096580, -0.5114425, 0.2992418, -0.0785340, 0.5357109, 0.3289207, -0.3216735, 0.8441963, 0.4427972, -0.1450028, -0.5189389, 0.5164788, -0.2295739, -0.8109898)
            + intermediate_one[1][1] * float4x4(0.8679836, 0.2453874, 0.0445314, 0.3268528, -0.3220893, 0.6331440, -0.2324342, 0.3277856, 0.5976416, -0.3579704, 0.2241263, 0.4188296, 0.2816098, -0.4526354, -0.0932917, -0.5069203)
            + intermediate_one[1][2] * float4x4(0.3491706, 0.6950073, -0.2200489, -0.2791410, -0.5270260, -0.0048248, -0.4373430, -0.2810147, -0.0345715, -0.3427582, 0.1196793, -1.5960346, -0.0381840, -0.0335675, 0.1601592, -0.5326478)
            + intermediate_one[1][3] * float4x4(0.0217786, 0.4402852, -0.0458370, 0.5371828, 0.5092328, -0.2655243, 0.7633936, 0.5628645, -0.2822161, 0.6544635, -0.0930350, 0.0723276, 0.2808362, 0.0224726, -0.3857975, -0.4270907)
            + intermediate_one[2][0] * float4x4(-0.6695632, -1.3018167, 0.4966340, 0.4563282, -0.2997080, 0.5479436, -0.3659787, -0.1448888, 0.5719818, 0.1111250, 0.2795530, -1.5486840, 1.4325916, 0.3948889, -0.3211470, 1.0776649)
            + intermediate_one[2][1] * float4x4(-0.1419864, 0.4137039, -0.2027608, -0.8241598, -0.0533112, -0.5779721, 0.1363716, 0.0609886, -0.2764777, 0.4199906, -0.0584371, 0.4831170, -0.5913124, 0.4380881, -0.0617751, 0.0709526)
            + intermediate_one[2][2] * float4x4(-0.6411708, -0.4940636, -0.1978721, 0.1931777, 0.7089500, 0.0942265, 0.3498370, 0.0960531, -0.9233676, -0.3870990, 0.4451410, -0.2297540, 0.2736749, 0.1294376, 0.1048205, 0.5775744)
            + intermediate_one[2][3] * float4x4(0.5180104, -0.4411871, -0.0199125, 0.2357241, 0.0598603, -0.0066150, -0.0055720, 0.2967352, 0.2556598, 0.1113799, -0.5181352, -0.2556311, 0.3540050, -0.0195077, 0.9741637, 0.7059493)
            + intermediate_one[3][0] * float4x4(0.2329957, 0.2194859, -0.3899478, -0.2337435, 1.1594456, -0.3893419, 0.6323572, 0.4002199, -0.0207946, 0.5246049, 0.3144599, 0.8060189, -0.0722087, 0.4149438, -0.2270382, 0.0075728)
            + intermediate_one[3][1] * float4x4(-0.0779937, -0.2814921, 0.0919855, 0.7589824, -0.3809714, 0.1531630, -0.2565777, 0.6334510, 0.5625550, -0.6146327, -1.1348156, -0.3219704, 0.2584018, -0.5957664, 0.8159598, 0.2346620)
            + intermediate_one[3][2] * float4x4(0.2972933, -0.2007489, 0.2382528, -0.0544675, -0.5125203, 0.6796858, -0.3335201, 0.0738933, 0.6924449, 0.2241549, 0.6425257, 0.3429602, 0.5126407, -0.1948581, 0.5378221, 0.2111171)
            + intermediate_one[3][3] * float4x4(-0.3396103, -1.5772192, 0.7203755, 0.9019065, -0.7170688, 1.4578397, -0.2221024, 0.1372226, 0.1711606, -0.8302392, -0.5001644, -1.8191942, -0.5644768, -0.8426286, 0.4108022, -0.0710097);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            0.0015044, 0.1940129, 0.2249057
        );
        result += intermediate_two[0][0] * float3(-0.8202597, -0.6552193, -1.5635701)
                + intermediate_two[0][1] * float3(1.0039742, 0.9961003, 1.7391213)
                + intermediate_two[0][2] * float3(-0.8871728, -0.9579470, -1.2751352)
                + intermediate_two[0][3] * float3(0.9178421, 1.1266366, 0.4144953)
                + intermediate_two[1][0] * float3(0.8761685, 0.5283481, 0.4564250)
                + intermediate_two[1][1] * float3(-0.6805079, -0.6281823, -1.2189755)
                + intermediate_two[1][2] * float3(0.6096373, 1.0624313, 0.7568904)
                + intermediate_two[1][3] * float3(0.0798488, 0.3145189, -0.6528067)
                + intermediate_two[2][0] * float3(-0.9226755, -0.9318712, 0.5641483)
                + intermediate_two[2][1] * float3(0.6345400, 0.4878730, 0.9843226)
                + intermediate_two[2][2] * float3(0.4787205, 0.2884411, 0.8905197)
                + intermediate_two[2][3] * float3(1.6519341, 1.6910315, 1.7834445)
                + intermediate_two[3][0] * float3(-0.5814033, -0.4730450, -1.4714506)
                + intermediate_two[3][1] * float3(-1.0708449, -0.9446073, -1.2912965)
                + intermediate_two[3][2] * float3(-0.6375564, -0.8180566, -0.8369362)
                + intermediate_two[3][3] * float3(0.9061906, 0.7976156, 0.9053922);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}