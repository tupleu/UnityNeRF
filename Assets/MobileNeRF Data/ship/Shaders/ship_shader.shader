Shader "MobileNeRF/ViewDependenceNetworkShader/ship" {
    Properties {
        tDiffuse0x ("Diffuse Texture 0", 2D) = "white" {}
        tDiffuse1x ("Diffuse Texture 1", 2D) = "white" {}
    }

    CGINCLUDE
    #include "UnityCG.cginc"

    struct appdata {
        float4 vertex : POSITION;
        float2 uv : TEXCOORD0;
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    struct v2f {
        float2 uv : TEXCOORD0;
        float4 vertex : SV_POSITION;
        float3 rayDirection : TEXCOORD1;
        UNITY_VERTEX_OUTPUT_STEREO
    };

    v2f vert(appdata v) {
        v2f o;

        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_INITIALIZE_OUTPUT(v2f, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        o.vertex = UnityObjectToClipPos(v.vertex);
        o.uv = v.uv;
        o.rayDirection = -WorldSpaceViewDir(v.vertex);
        o.rayDirection.xz = -o.rayDirection.xz;o.rayDirection.xyz = o.rayDirection.xzy;

        return o;
    }

    sampler2D tDiffuse0x;
    sampler2D tDiffuse1x;

    half3 evaluateNetwork(fixed4 f0, fixed4 f1, fixed4 viewdir) {
        float4x4 intermediate_one = { 0.0630536, 0.1720456, -0.1485582, 0.1940658, 0.1262482, -0.1001003, -0.0676622, -0.0596305, 0.0866204, -0.1750931, 0.1244643, -0.2610603, -0.0792748, -0.0417459, -0.0564061, 0.2910901 };
        intermediate_one += f0.r * float4x4(-0.8618520, -0.1576365, 0.1840802, -0.1698975, 0.3951792, -0.7307289, -0.4747633, 0.1224269, -0.6503054, 0.1968506, 0.2090754, -0.2313570, -0.0693585, 0.2814610, 0.0996614, -0.0924857)
            + f0.g * float4x4(-0.8529685, 0.0518502, 0.4291569, 0.0936461, -0.7535432, -0.0362958, 0.6653237, 0.0175016, 0.1369904, 0.3383558, 0.1818549, -0.3573670, -0.2650386, 0.7429471, 0.4595621, -0.5140128)
            + f0.b * float4x4(-1.1768962, -0.1833028, -0.2881683, -0.8632047, -0.1353390, 0.4471049, -0.0565007, -0.2338333, -0.2033936, 0.5124933, -0.4071079, 0.7933451, -0.0483448, -0.2079893, 0.6660298, 0.1908462)
            + f0.a * float4x4(0.2512013, -0.0765414, -0.1741297, 0.4053432, -0.3708897, 0.4832495, 0.0250331, 0.8921074, -0.5552654, -0.2061944, -0.9758823, 0.3559084, 0.1283816, 0.1383683, -0.4673771, -0.2213994)
            + f1.r * float4x4(0.4844467, -0.8367194, 0.5805631, 0.4195289, -0.1790401, 0.3260539, -0.0850323, 0.1885577, 0.3934465, 0.8578817, 0.8284410, 0.1898543, 0.6880115, -0.4118277, 0.4578448, -0.0498166)
            + f1.g * float4x4(0.7795900, -0.3400046, -0.4162609, -0.5128105, 0.5987495, 0.6204070, 0.6187682, -0.5415386, 0.3719329, -0.3109426, -0.0618359, 0.2247146, 0.0712235, 0.8203816, 0.2598711, -0.5262747)
            + f1.b * float4x4(-0.1303187, 0.8253442, -0.0708553, -0.5026863, -0.0333655, 0.3949960, -0.1918515, 0.2297840, -1.0573877, -0.3891540, 0.5057994, -0.6033542, 0.2068126, 0.1954446, -0.1335332, 0.5782796)
            + f1.a * float4x4(0.5493517, -0.6647088, 0.4338835, 0.1670731, -0.0389551, 0.0949362, 0.7602906, 0.4323497, 0.2759765, 0.2153963, 0.4275459, 0.2324237, -0.9825840, 0.0929465, -0.0218721, 0.4307800)
            + viewdir.r * float4x4(0.5456829, -0.4507595, 0.3533573, 0.0446309, -0.1375097, 0.2189097, 0.0134387, -0.4583523, 0.9243137, -0.4830799, -0.1099852, -0.5344127, -0.1493562, -0.5126622, -0.4550464, -0.5666606)
            + viewdir.g * float4x4(0.5654578, -0.5414311, -0.0884430, 0.0652896, -0.8693420, -0.1173906, -0.0214215, 0.3918884, -0.0756353, 0.3079246, 0.0722816, -0.0086508, -0.8184866, 0.1957933, 0.2468631, 0.4337900)
            + viewdir.b * float4x4(0.6672998, 0.0554522, -0.3486521, -0.5956255, -0.1209846, 0.0093384, -0.4774171, -0.3782682, -0.1520167, 0.1255510, -0.1612467, -0.0933740, -0.1597457, -0.1581416, -0.2253635, -0.2694245);
        intermediate_one[0] = max(intermediate_one[0], 0.0);
        intermediate_one[1] = max(intermediate_one[1], 0.0);
        intermediate_one[2] = max(intermediate_one[2], 0.0);
        intermediate_one[3] = max(intermediate_one[3], 0.0);
        float4x4 intermediate_two = float4x4(
            0.1756677, -0.1130191, 0.0478579, -0.1719361, 0.2150311, -0.0369989, 0.3379224, -0.1916307, 0.1419953, 0.0687134, -0.2466889, 0.2238647, -0.0471152, -0.0865358, -0.0064823, 0.1728124
        );
        intermediate_two += intermediate_one[0][0] * float4x4(0.3025590, -3.0327637, 0.8122669, 0.1486645, 0.7033916, 0.7428066, 0.6164573, -0.2872815, 0.1816728, 0.7414024, -0.0633935, 0.4427154, 0.4378985, 0.1371662, 0.2792449, -0.1212280)
            + intermediate_one[0][1] * float4x4(-0.4205528, -0.1819645, 0.5035088, 0.2014936, -0.1168757, -0.1178097, -1.6772743, 0.1223348, 0.0299184, 0.0707061, 0.6625503, -3.5394187, 0.7306675, -0.0177492, 0.0666028, 0.0239407)
            + intermediate_one[0][2] * float4x4(0.0934010, -0.5555298, 0.0023828, 0.3756931, 0.4859196, 0.5383616, -0.4162221, 0.1663631, -0.0409075, 0.6431948, 0.1552690, 0.1670338, 0.0069235, -0.2583546, 0.1249263, -0.1398635)
            + intermediate_one[0][3] * float4x4(0.2112684, 0.4716635, -0.4066867, -0.7312098, 0.1469116, 0.1357464, 0.6225555, -0.1019868, 0.4749304, 0.3532887, -0.6269049, -0.1141372, -0.5020494, 0.6210845, -0.5468035, 0.0711914)
            + intermediate_one[1][0] * float4x4(0.0512311, -0.0081727, 0.0347423, -0.4960473, 0.3832337, -0.5467833, 1.2481186, -0.1339104, 0.0694703, -0.5000530, -0.4642454, 0.9936281, -0.2217829, -0.4630148, -0.1660733, -0.1122979)
            + intermediate_one[1][1] * float4x4(0.2026813, 0.3335857, 0.0097751, 0.0836791, -0.5256459, 0.5635515, 0.1220604, 0.1547256, 0.1426109, -0.3792056, -0.1975155, 0.5727952, 0.4242918, 0.1868815, -0.0330681, -0.2060517)
            + intermediate_one[1][2] * float4x4(-0.2824856, 0.5973291, -0.0141681, 0.1132667, -0.4994210, 0.2055230, -0.5218579, -0.2247023, -0.1541893, -0.1327456, 0.0479674, -0.4485624, 0.2319165, 0.2293957, 0.1863135, -0.2892028)
            + intermediate_one[1][3] * float4x4(0.0339254, 0.4717221, 0.4723603, 0.3081921, 0.3232985, 0.0435084, 0.2455136, -0.2715299, -0.5834226, 0.4732161, -0.2622945, 0.0135861, 0.4236224, -0.4343984, -0.0214988, 0.3428485)
            + intermediate_one[2][0] * float4x4(-1.4103658, -1.0751166, 0.2022040, 0.3941803, 0.9642162, 0.1083869, -1.4901001, -0.1224345, 0.3438898, 0.3929435, -0.1442557, -1.1412911, 0.0125657, 0.9413251, -0.5380787, -0.9221894)
            + intermediate_one[2][1] * float4x4(0.2679435, 0.3157096, -0.2154043, -0.1886134, 0.1637121, -0.2509661, 0.5301130, -0.6989167, -0.1232763, 0.4742745, -0.6798688, 0.5358611, -0.6094894, 0.5618981, -0.1290209, 0.1399060)
            + intermediate_one[2][2] * float4x4(-0.3147797, -0.5601996, 0.0583632, 0.4802938, 0.7457572, 0.0751666, 0.0891665, 0.2010901, -0.5564515, -0.1998880, 0.9831424, -0.0248694, 0.5176402, 0.2747283, 0.2716112, 0.4069303)
            + intermediate_one[2][3] * float4x4(0.4911675, 0.2133061, 0.1187287, -0.2875287, 0.5578327, -0.0658408, 0.3367301, 0.3770089, 0.5415287, 0.2051013, -0.2179654, 0.8906751, 0.2122667, -0.6113062, 0.2944384, 0.9365045)
            + intermediate_one[3][0] * float4x4(-0.6707133, -0.4578864, 0.2720335, 0.1350656, 0.2480092, -0.0695557, -1.4721968, -0.0458261, -0.1594237, 0.2206744, 0.3760598, -1.4370837, 0.3038067, 1.2042121, 0.4438758, -0.7392179)
            + intermediate_one[3][1] * float4x4(0.3335582, 0.1487057, 0.2462047, 0.3223146, -0.1446503, -0.0132134, -0.5280632, 0.1987196, 0.2963508, -0.4379656, -0.2846756, -0.6520743, -0.0611554, -0.5701039, 0.5559375, -0.1323539)
            + intermediate_one[3][2] * float4x4(-0.4605654, -0.2820923, 0.1866434, 0.1579308, -0.0503431, 0.4345133, -0.3698781, 0.1481835, 0.5251811, 0.3360443, 0.4075344, -0.3761151, 0.1972680, -0.0333283, 0.2746124, -0.2515194)
            + intermediate_one[3][3] * float4x4(1.1364762, -0.5670105, 0.4618205, 0.5774875, -0.2865255, 0.4161243, -0.1589188, 0.7948993, 0.3516875, 0.3450456, 0.5366002, -0.4631827, 0.1891419, 0.1264537, 0.3408147, 0.8283621);
        intermediate_two[0] = max(intermediate_two[0], 0.0);
        intermediate_two[1] = max(intermediate_two[1], 0.0);
        intermediate_two[2] = max(intermediate_two[2], 0.0);
        intermediate_two[3] = max(intermediate_two[3], 0.0);
        float3 result = float3(
            -0.1526272, 0.0725915, 0.1833308
        );
        result += intermediate_two[0][0] * float3(-0.7200530, -0.3854417, 0.4236845)
                + intermediate_two[0][1] * float3(0.9882236, 0.9791856, 0.6461331)
                + intermediate_two[0][2] * float3(-0.2859721, -0.4122406, -0.0546116)
                + intermediate_two[0][3] * float3(-0.0707651, -0.0336476, -0.4593680)
                + intermediate_two[1][0] * float3(1.0931067, 0.7745414, 0.5477836)
                + intermediate_two[1][1] * float3(-0.2766208, -0.5652896, -0.4546666)
                + intermediate_two[1][2] * float3(2.9465210, 2.7720554, 1.6265051)
                + intermediate_two[1][3] * float3(-0.2193845, 0.1265096, -0.2833051)
                + intermediate_two[2][0] * float3(-0.6627231, -0.3302470, 0.4042504)
                + intermediate_two[2][1] * float3(0.3404529, 0.6062078, 0.6225899)
                + intermediate_two[2][2] * float3(-0.0459291, -0.8079630, 0.3137076)
                + intermediate_two[2][3] * float3(2.1597688, 2.5271420, 2.4507284)
                + intermediate_two[3][0] * float3(-0.4170003, -0.2158438, -0.9291890)
                + intermediate_two[3][1] * float3(-1.4076731, -1.3171141, -0.9665592)
                + intermediate_two[3][2] * float3(-0.1971203, -0.2067514, -0.2523927)
                + intermediate_two[3][3] * float3(0.9752862, 0.4150818, -0.2627318);
		result = 1.0 / (1.0 + exp(-result));
        return result*viewdir.a+(1.0-viewdir.a);
    }
    ENDCG

    SubShader {
        Cull Off
        ZTest LEqual

        Pass {
            CGPROGRAM

            #pragma vertex vert
            #pragma fragment frag

            fixed4 frag(v2f i) : SV_Target {
                fixed4 diffuse0 = tex2D( tDiffuse0x, i.uv );
                if (diffuse0.r == 0.0) discard;
                fixed4 diffuse1 = tex2D( tDiffuse1x, i.uv );
                fixed4 rayDir = fixed4(normalize(i.rayDirection), 1.0);

                // normalize range to [-1, 1]
                diffuse0.a = diffuse0.a * 2.0 - 1.0;
                diffuse1.a = diffuse1.a * 2.0 - 1.0;

                fixed4 fragColor;
                fragColor.rgb = evaluateNetwork(diffuse0,diffuse1,rayDir);
                fragColor.a = 1.0;

                #if(!UNITY_COLORSPACE_GAMMA)
                    fragColor.rgb = GammaToLinearSpace(fragColor.rgb);
                #endif

                return fragColor;
            }
            ENDCG
        }

        // ------------------------------------------------------------------
        //  Shadow rendering pass
        Pass {
            Tags {"LightMode" = "ShadowCaster"}

            CGPROGRAM

            #pragma vertex vert
            #pragma fragment fragShadowCaster
            #pragma multi_compile_shadowcaster

            fixed4 fragShadowCaster(v2f i) : SV_Target{
                fixed4 diffuse0 = tex2D(tDiffuse0x, i.uv);
                if (diffuse0.r == 0.0) discard;
                return 0;
            }
            ENDCG
        }
    }
}